##
# Copyrights:  2025 Codoworks.com
# Author:      Dexter Codo
# Website:     https://dexterexplains.com 
<<<<<<< HEAD
# Contact:     hello@dexterexplains.com
=======
# Contact:     dexter.codo@gmail.com
>>>>>>> 4101d20 (initial commit)
# Project:     Kubernetes Installer
##

# PLAYBOOK CONFIG ----------------------------------------------------------------------------
- hosts: all
  become: true
  gather_facts: true
  
  # VAR PROMPTS ------------------------------------------------------------------------------

  # vars_prompt:
  #  - name: "var_name"
  #    prompt: "User prompt? change me..."
  #    private: no # should this be visible or hidden like a password
     
  # TASKS ------------------------------------------------------------------------------------
  tasks:

  # PRE-FLIGHT CHECKS ------------------------------------------------------------------------
  - name: Pre-flight check, fail if OS is not Ubuntu.
    when: ansible_distribution != "Ubuntu"
    fail:
      msg: "This script is designed for Ubuntu"
    
  # PRE-CONFIG -------------------------------------------------------------------------------
  - name: Disable swap for current session.
    when: ansible_swaptotal_mb > 0
    command: swapoff -a

  - name: Disable swap permanently.
    when: ansible_swaptotal_mb > 0
    replace:
      path: /etc/fstab
      regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
      replace: '#\1\2\3swap\4'
      backup: true

  # BEGIN ------------------------------------------------------------------------------------
  - name: (Re)Create an empty kubernetes sysctl.d file. #this is important so that if it ran again it will overwrite and not append.
    copy:
      content: ""
      dest: /etc/sysctl.d/kubernetes.conf
      force: false

  - name: Configure Kubernetes sysctl.d file. # this goes together with the above 
    lineinfile:
      path: /etc/sysctl.d/kubernetes.conf 
      line: "{{ item }}"
    with_items:
      - 'net.bridge.bridge-nf-call-iptables  = 1'
      - 'net.ipv4.ip_forward                 = 1'
      - 'net.bridge.bridge-nf-call-ip6tables = 1'

  - name: (Re)Create an empty containerd module. #this is important so that if it ran again it will overwrite and not append.
    copy:
      content: ""
      dest: /etc/modules-load.d/containerd.conf
      force: false

  - name: Configure containerd module. # this goes together with the above 
    blockinfile:
      path: /etc/modules-load.d/containerd.conf 
      block: |
        overlay
        br_netfilter

  - name: Apply sysctl.d config without rebooting.
    command: sysctl --system

  - name: Install dependency packages required for kubernetes.
    apt:
      name: 
        - curl 
        - apt-transport-https 
        - vim 
        - git 
        - wget 
        - gnupg2
        - software-properties-common 
        - lsb-release 
        - ca-certificates 
        - uidmap
      state: latest

  - name: Add Docker's official GPG key.
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker-apt-keyring.asc
      mode: '0644'
      force: true

  - name: Add Docker APT Repository.
    apt_repository:
      repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      state: present

  - name: Add Google's official GPG key.
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Add Kubernetes apt-key.
    get_url:
      url: "https://pkgs.k8s.io/core:/stable:/{{ k8s_apt_pkg_version }}/deb/Release.key"
      dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
      mode: '0644'
      force: true

  - name: Add Kubernetes APT repository.
    apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/{{ k8s_apt_pkg_version }}/deb/ /"
      state: present
      update_cache: true

  - name: Full system update.
    apt:
      update_cache: true
      upgrade: dist
      cache_valid_time: 3600
      force_apt_get: true
  
  - name: Install container.d.
    apt:
      name: containerd.io
      state: present
  
  - name: Create container.d folder.
    file:
      path: /etc/containerd
      state: directory

  - name: Check if container.d has been configured.
    stat:
      path: "/etc/containerd/default_bin_config.toml"
    register: containerd_result

  - name: Configure container.d.
    when: not containerd_result.stat.exists
    shell: /usr/bin/containerd config default > /etc/containerd/default_bin_config.toml && cp /etc/containerd/default_bin_config.toml /etc/containerd/config.toml
    args:
      creates: 
        - /etc/containerd/default_bin_config.toml
        - /etc/containerd/config.toml
  
  - name: Configure system.d cgroup driver for container.d
    lineinfile:
      path: /etc/containerd/config.toml
      regexp: 'SystemdCgroup = false'
      line: 'SystemdCgroup = true'
  
  - name: Enable and start container.d service.
    systemd: 
      name: containerd
      state: restarted
      enabled: true
      daemon-reload: true
  
  - name: Install kubernetes packages.
    apt:
      name: 
        - kubelet={{ k8s_version }}
        - kubeadm={{ k8s_version }}
        - kubectl={{ k8s_version }}
      state: present

  # CLEAN UP ---------------------------------------------------------------------------------
  - name: Reboot node.
    reboot:
      msg: "Reboot initiated by Ansible"
      connect_timeout: 5
      reboot_timeout: 3600
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: whoami